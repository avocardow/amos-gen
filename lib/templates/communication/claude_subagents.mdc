---
description: AMOS Claude Sub-Agents - Simple coordination using Claude's sub-agent capabilities
globs: 
alwaysApply: false
---

# ðŸ¤– Claude Sub-Agent Coordination

## Overview
AMOS uses Claude's native sub-agent capabilities for simple, template-driven multi-agent workflows. No complex scripts or middleware required.

## Sub-Agent Pattern

### Creating Sub-Agents
```markdown
I need to delegate this task to specialized agents. I'll create sub-agents:

**PLANNER Sub-Agent:**
```
You are the PLANNER agent in the AMOS system. Your role:
- Read .cursor/rules/amos/project-data/amos_config.mdc for project context
- Create detailed technical plans for implementation
- Break features into <4hr tasks with clear acceptance criteria
- Output structured plans in the format specified in WORKFLOW_PHASES.mdc

Current task: [task description]
```

**WORKER Sub-Agent:**
```
You are the WORKER agent in the AMOS system. Your role:
- Read .cursor/rules/amos/project-data/amos_config.mdc for coding standards
- Implement code following project patterns and conventions
- Write comprehensive tests for all implementations
- Follow the implementation guidelines in WORKFLOW_PHASES.mdc

Current task: [specific implementation task from PLANNER]
Requirements: [technical requirements and acceptance criteria]
```

## Coordination Protocol

### Phase 1: ASSESS (Manager)
1. Read `amos_config.mdc` for project context
2. Understand user requirements 
3. Update `agent_state.mdc` with assessment
4. Determine if sub-agents needed

### Phase 2: PLAN (Manager â†’ PLANNER Sub-Agent)
```markdown
I need you to act as a PLANNER sub-agent for this task:

**Context:** [brief project context]
**Requirements:** [user requirements]
**Constraints:** [technical/business constraints]

Please:
1. Read the project standards in amos_config.mdc
2. Create a detailed technical plan
3. Break into specific implementation tasks
4. Provide clear acceptance criteria for each task

Format your response as a structured plan following WORKFLOW_PHASES.mdc guidelines.
```

### Phase 3: DELEGATE (Manager â†’ WORKER Sub-Agent)
```markdown
I need you to act as a WORKER sub-agent to implement this plan:

**Technical Plan:** [output from PLANNER]
**Specific Task:** [individual task to implement]
**Files to Modify:** [specific files]

Please:
1. Read amos_config.mdc for coding standards
2. Implement the solution following project patterns
3. Write appropriate tests
4. Ensure code quality and error handling

Provide the complete implementation with clear explanations.
```

### Phase 4: VERIFY (Manager + Sub-Agents)
```markdown
Let me verify this implementation with both PLANNER and WORKER perspectives:

**PLANNER Verification:**
```
Review this implementation against the original plan:
- Does it meet all acceptance criteria?
- Are there any architectural concerns?
- What testing strategy is needed?
```

**WORKER Quality Check:**
```
Review this code for quality:
- Does it follow project conventions?
- Are error cases handled?
- Are tests comprehensive?
```
```

## Simple Workspace Pattern

### File-Based Coordination
```markdown
# Current Work Status (agent_state.mdc)
## Active Tasks
- **File:** src/auth/login.ts
- **Agent:** WORKER (sub-agent)
- **Status:** IN_PROGRESS
- **Description:** Implementing OAuth login flow

## Communication Log
- Manager â†’ PLANNER: "Plan OAuth implementation"
- PLANNER â†’ Manager: "Plan completed, 3 tasks identified"
- Manager â†’ WORKER: "Implement login.ts OAuth flow"
```

### Git Worktree Usage (Simple)
```bash
# Manager creates focused workspace
git worktree add ../amos-work feature/auth-system

# Work in isolated directory
cd ../amos-work

# Sub-agents work on specific files without conflicts
# Manager coordinates through clear task delegation
```

## Sub-Agent Prompts

### PLANNER Sub-Agent Template
```markdown
You are an expert technical architect working as a PLANNER sub-agent in the AMOS system.

**Project Context:**
{content from amos_config.mdc}

**Current Task:**
{task description}

**Your Responsibilities:**
- Create detailed technical approach
- Break into implementable tasks (<4hrs each)
- Identify dependencies and risks
- Provide clear acceptance criteria

**Output Format:**
Follow the PLAN phase structure from WORKFLOW_PHASES.mdc

**Constraints:**
- Must follow project technology stack
- Consider existing code patterns
- Account for testing requirements
```

### WORKER Sub-Agent Template  
```markdown
You are an expert developer working as a WORKER sub-agent in the AMOS system.

**Project Standards:**
{content from amos_config.mdc}

**Implementation Task:**
{specific task from PLANNER}

**Your Responsibilities:**
- Write production-quality code
- Follow project conventions and patterns
- Include comprehensive error handling
- Write appropriate tests

**Requirements:**
- Read existing code before writing new code
- Follow the coding standards specified in project configuration
- Ensure all edge cases are handled
- Provide clear, well-documented implementation
```

## Memory Management

### Session Coordination
```markdown
# Update agent_state.mdc after each phase
## Current Phase: DELEGATE
## Last Action: Created WORKER sub-agent for login implementation
## Next Steps: Monitor implementation, verify quality
## Sub-Agents Active: WORKER (login.ts)

## Blueprint History
### v1.0: OAuth Implementation Plan
- Task 1: Setup OAuth provider configuration
- Task 2: Implement login endpoint  
- Task 3: Add session management
```

### Long-Term Learning
```markdown
# Update amos_config.mdc with successful patterns
## Agent Success Patterns
- PLANNER sub-agents excel at breaking complex features into 2-4hr tasks
- WORKER sub-agents work best with specific file-level assignments
- Verification phase prevents bugs through dual perspective review

## Effective Coordination Examples
- Use specific file assignments to prevent conflicts
- Include clear acceptance criteria in all delegations
- Always verify implementation through both PLANNER and WORKER lenses
```

## Token Efficiency

### Minimal Context Loading
- Sub-agents only receive necessary context for their specific task
- Use focused prompts rather than loading entire project context
- Leverage git worktree for file isolation without complex tracking

### Progressive Work
- Complete one task fully before starting next
- Update state after each completed task
- Archive completed work to reduce ongoing context

## Simple Conflict Prevention

### File-Level Coordination
```markdown
## Active Work (in agent_state.mdc)
- src/auth/login.ts: WORKER sub-agent (OAuth implementation)
- src/auth/types.ts: PLANNER sub-agent (type definitions)
- tests/auth.test.ts: WORKER sub-agent (test coverage)

Rule: One agent per file at a time
```

### Clear Handoffs
```markdown
MANAGER â†’ PLANNER: "Plan the OAuth system architecture"
PLANNER â†’ MANAGER: "Plan complete. Ready for implementation."
MANAGER â†’ WORKER: "Implement src/auth/login.ts per attached plan"
WORKER â†’ MANAGER: "Implementation complete. Ready for verification."
```

---
*Simple, effective multi-agent coordination using Claude's native capabilities*