---
description: AMOS Codebase Map - Living documentation of project structure and dependencies
globs: 
alwaysApply: false
---

# Codebase Map

## Overview

This document maintains a living map of the project's codebase structure, dependencies, and key components.

## Project Structure

### Root Directory

```
project/
├── .cursor/                 # Cursor IDE configuration
│   └── rules/amos/         # AMOS agent instructions and data
├── .taskmaster/            # Task Master AI configuration
│   ├── tasks/              # Task definitions and state
│   └── docs/               # Project documentation
├── src/                    # Source code
├── tests/                  # Test files
├── docs/                   # Additional documentation
├── scripts/                # Build and deployment scripts
├── config/                 # Configuration files
└── package.json           # Project dependencies
```

### Source Code Structure

```
src/
├── components/             # UI components
│   ├── auth/              # Authentication components
│   ├── dashboard/         # Dashboard components
│   └── shared/            # Shared/reusable components
├── services/              # Business logic and API services
│   ├── auth.js            # Authentication service
│   ├── api.js             # API client
│   └── utils.js           # Utility functions
├── hooks/                 # React hooks (if applicable)
├── contexts/              # React contexts (if applicable)
├── types/                 # TypeScript type definitions
├── assets/                # Static assets
├── styles/                # Styling files
└── index.js               # Main entry point
```

### Test Structure

```
tests/
├── unit/                  # Unit tests
├── integration/           # Integration tests
├── e2e/                   # End-to-end tests
├── fixtures/              # Test fixtures
└── helpers/               # Test utilities
```

## Key Files

### Core Application Files

- **`src/index.js`**: Main application entry point
- **`src/App.js`**: Root application component
- **`src/config/index.js`**: Application configuration
- **`src/services/api.js`**: API service layer
- **`src/utils/index.js`**: Utility functions

### Configuration Files

- **`package.json`**: Dependencies and project metadata
- **`webpack.config.js`**: Build configuration
- **`.env`**: Environment variables
- **`jest.config.js`**: Testing configuration
- **`eslint.config.js`**: Linting configuration

### Documentation Files

- **`README.md`**: Project overview and setup
- **`CHANGELOG.md`**: Version history
- **`API.md`**: API documentation
- **`DEPLOYMENT.md`**: Deployment instructions

## Dependencies

### Production Dependencies

Update this section as dependencies are added or removed:

```json
{
  "react": "^18.2.0",
  "react-dom": "^18.2.0",
  "axios": "^1.4.0",
  "express": "^4.18.0"
}
```

### Development Dependencies

```json
{
  "jest": "^29.5.0",
  "eslint": "^8.42.0",
  "prettier": "^2.8.0",
  "webpack": "^5.88.0"
}
```

### Peer Dependencies

```json
{
  "node": ">=16.0.0",
  "npm": ">=8.0.0"
}
```

## Component Architecture

### Authentication System

```
src/components/auth/
├── LoginForm.js           # User login interface
├── RegisterForm.js        # User registration interface
├── ForgotPassword.js      # Password reset interface
├── AuthProvider.js        # Authentication context provider
└── ProtectedRoute.js      # Route protection component
```

### Dashboard System

```
src/components/dashboard/
├── Dashboard.js           # Main dashboard component
├── UserProfile.js         # User profile management
├── Settings.js            # Application settings
└── Navigation.js          # Dashboard navigation
```

### Shared Components

```
src/components/shared/
├── Button.js              # Reusable button component
├── Modal.js               # Modal dialog component
├── Form.js                # Form components
├── Loading.js             # Loading indicators
└── ErrorBoundary.js       # Error handling component
```

## API Structure

### Authentication Endpoints

- **`POST /api/auth/login`**: User authentication
- **`POST /api/auth/register`**: User registration
- **`POST /api/auth/logout`**: User logout
- **`GET /api/auth/profile`**: Get user profile
- **`PUT /api/auth/profile`**: Update user profile

### Data Endpoints

- **`GET /api/data`**: Retrieve application data
- **`POST /api/data`**: Create new data entry
- **`PUT /api/data/:id`**: Update data entry
- **`DELETE /api/data/:id`**: Delete data entry

## Database Schema

### User Table

```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  first_name VARCHAR(100),
  last_name VARCHAR(100),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Data Table

```sql
CREATE TABLE data (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  title VARCHAR(255) NOT NULL,
  content TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Build Process

### Development Build

```bash
npm run dev          # Start development server
npm run build        # Build for production
npm run test         # Run test suite
npm run lint         # Run linting
```

### Production Build

```bash
npm run build:prod   # Production build
npm run deploy       # Deploy to production
```

## Environment Configuration

### Development Environment

```
NODE_ENV=development
API_URL=http://localhost:3001
DATABASE_URL=postgres://user:pass@localhost:5432/dev_db
```

### Production Environment

```
NODE_ENV=production
API_URL=https://api.example.com
DATABASE_URL=postgres://user:pass@prod-db:5432/prod_db
```

## Integration Points

### External Services

- **Authentication**: JWT-based authentication
- **Database**: PostgreSQL for data persistence
- **API**: RESTful API with Express.js
- **Frontend**: React with hooks and context

### Third-Party Libraries

- **UI Framework**: React with Material-UI
- **State Management**: React Context API
- **HTTP Client**: Axios for API requests
- **Testing**: Jest for unit and integration tests

## Performance Considerations

### Bundle Size

- Monitor bundle size with webpack-bundle-analyzer
- Implement code splitting for large components
- Use lazy loading for route components

### Database Optimization

- Index frequently queried columns
- Use connection pooling
- Implement query optimization

## Security Considerations

### Authentication

- JWT tokens with expiration
- Password hashing with bcrypt
- Secure session management

### Data Protection

- Input validation and sanitization
- SQL injection prevention
- XSS protection

## Monitoring and Logging

### Application Monitoring

- Error tracking with logging service
- Performance monitoring
- User analytics

### System Monitoring

- Server health checks
- Database performance monitoring
- API response time tracking

## Manager Integration

### Update Instructions

```bash
# Update codebase map after structural changes
tmux send-keys -t PLANNER "MANAGER: TASK_ASSIGN: Update codebase_map.mdc with new component structure" C-m

# Worker updates after implementation
tmux send-keys -t WORKER "MANAGER: TASK_ASSIGN: Update codebase_map.mdc with new API endpoints" C-m
```

### Maintenance Schedule

- **After major refactoring**: Update component structure
- **After new features**: Add new components and services
- **After dependency changes**: Update dependency lists
- **Weekly**: Review and validate structure accuracy

This living document should be updated whenever significant changes are made to the codebase structure, dependencies, or architecture.