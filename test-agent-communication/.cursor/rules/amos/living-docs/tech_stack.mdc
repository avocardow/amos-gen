---
description: AMOS Technology Stack - Living documentation of architectural decisions and technology choices
globs: 
alwaysApply: false
---

# Technology Stack

## Overview

This document maintains a living record of technology choices, architectural decisions, and technical standards for the project.

## Architecture Overview

### System Architecture

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Frontend      │    │   Backend       │    │   Database      │
│   (React)       │◄──►│   (Node.js)     │◄──►│   (PostgreSQL)  │
│                 │    │                 │    │                 │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   CDN/Static    │    │   API Gateway   │    │   Redis Cache   │
│   (Vercel)      │    │   (Express)     │    │   (Redis)       │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

### Deployment Architecture

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Development   │    │   Staging       │    │   Production    │
│   (Local)       │    │   (Preview)     │    │   (Live)        │
│                 │    │                 │    │                 │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Docker        │    │   Docker        │    │   Kubernetes    │
│   Compose       │    │   Swarm         │    │   Cluster       │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

## Technology Stack

### Frontend Technologies

#### Core Framework
- **React 18.2.0**: Component-based UI library
  - **Why**: Mature ecosystem, excellent performance, strong community
  - **Alternatives considered**: Vue.js, Angular, Svelte
  - **Decision date**: 2024-01-15

#### State Management
- **React Context API**: Built-in state management
  - **Why**: Sufficient for medium complexity, no external dependencies
  - **Alternatives considered**: Redux, Zustand, Recoil
  - **Decision date**: 2024-01-20

#### Routing
- **React Router 6**: Client-side routing
  - **Why**: Standard React routing solution, good performance
  - **Alternatives considered**: Next.js routing, Reach Router
  - **Decision date**: 2024-01-22

#### Styling
- **Tailwind CSS 3.3.0**: Utility-first CSS framework
  - **Why**: Rapid development, consistent design, small bundle size
  - **Alternatives considered**: Styled Components, Material-UI, Bootstrap
  - **Decision date**: 2024-01-25

#### HTTP Client
- **Axios 1.4.0**: HTTP client library
  - **Why**: Interceptors, request/response transformation, wide adoption
  - **Alternatives considered**: Fetch API, SWR, React Query
  - **Decision date**: 2024-01-28

### Backend Technologies

#### Runtime Environment
- **Node.js 18.17.0**: JavaScript runtime
  - **Why**: JavaScript across stack, large ecosystem, performance
  - **Alternatives considered**: Python, Go, Java
  - **Decision date**: 2024-01-15

#### Web Framework
- **Express.js 4.18.2**: Web application framework
  - **Why**: Minimalist, flexible, large ecosystem
  - **Alternatives considered**: Fastify, Koa, NestJS
  - **Decision date**: 2024-01-18

#### Authentication
- **JSON Web Tokens (JWT)**: Stateless authentication
  - **Why**: Scalable, stateless, cross-domain support
  - **Alternatives considered**: Sessions, OAuth, Passport
  - **Decision date**: 2024-01-30

#### Password Hashing
- **bcrypt 5.1.0**: Password hashing library
  - **Why**: Time-tested, configurable work factor, secure
  - **Alternatives considered**: Argon2, scrypt, PBKDF2
  - **Decision date**: 2024-02-01

#### Input Validation
- **Joi 17.9.2**: Schema validation library
  - **Why**: Comprehensive validation, good error messages
  - **Alternatives considered**: Yup, Zod, express-validator
  - **Decision date**: 2024-02-05

### Database Technologies

#### Primary Database
- **PostgreSQL 15.3**: Relational database
  - **Why**: ACID compliance, rich feature set, excellent performance
  - **Alternatives considered**: MySQL, MongoDB, SQLite
  - **Decision date**: 2024-01-16

#### ORM/Database Layer
- **Prisma 4.16.2**: Database toolkit and ORM
  - **Why**: Type-safe, excellent developer experience, migration system
  - **Alternatives considered**: Sequelize, TypeORM, Knex
  - **Decision date**: 2024-01-19

#### Caching
- **Redis 7.0.11**: In-memory cache
  - **Why**: High performance, data structures, persistence options
  - **Alternatives considered**: Memcached, In-memory cache
  - **Decision date**: 2024-02-10

### DevOps & Infrastructure

#### Containerization
- **Docker 24.0.2**: Container platform
  - **Why**: Consistent environments, easy deployment, scalability
  - **Alternatives considered**: Podman, containerd
  - **Decision date**: 2024-01-17

#### Orchestration
- **Docker Compose**: Development orchestration
- **Kubernetes**: Production orchestration
  - **Why**: Industry standard, scalability, service discovery
  - **Alternatives considered**: Docker Swarm, Nomad
  - **Decision date**: 2024-02-15

#### CI/CD
- **GitHub Actions**: Continuous integration/deployment
  - **Why**: GitHub integration, free tier, flexible workflows
  - **Alternatives considered**: GitLab CI, Jenkins, CircleCI
  - **Decision date**: 2024-01-21

#### Hosting
- **Vercel**: Frontend hosting
  - **Why**: Zero-config deployment, edge network, preview deployments
  - **Alternatives considered**: Netlify, AWS S3, Cloudflare Pages
  - **Decision date**: 2024-02-20

- **Railway**: Backend hosting
  - **Why**: Simple deployment, database included, reasonable pricing
  - **Alternatives considered**: Heroku, DigitalOcean, AWS ECS
  - **Decision date**: 2024-02-22

### Development Tools

#### Code Quality
- **ESLint 8.44.0**: JavaScript linter
  - **Why**: Catch errors, enforce style, large rule set
  - **Alternatives considered**: JSHint, StandardJS
  - **Decision date**: 2024-01-23

- **Prettier 2.8.8**: Code formatter
  - **Why**: Consistent formatting, IDE integration, zero config
  - **Alternatives considered**: Beautify, manual formatting
  - **Decision date**: 2024-01-23

#### Testing
- **Jest 29.5.0**: Testing framework
  - **Why**: Comprehensive, zero config, snapshot testing
  - **Alternatives considered**: Vitest, Mocha, Jasmine
  - **Decision date**: 2024-01-26

- **React Testing Library 13.4.0**: React testing utilities
  - **Why**: User-centric testing, good practices, simple API
  - **Alternatives considered**: Enzyme, testing-library
  - **Decision date**: 2024-01-27

- **Cypress 12.17.1**: End-to-end testing
  - **Why**: Visual testing, time travel, real browser testing
  - **Alternatives considered**: Playwright, Selenium, Puppeteer
  - **Decision date**: 2024-02-08

#### Build Tools
- **Webpack 5.88.1**: Module bundler
  - **Why**: Mature, flexible, large ecosystem
  - **Alternatives considered**: Vite, Rollup, Parcel
  - **Decision date**: 2024-01-24

- **Babel 7.22.5**: JavaScript compiler
  - **Why**: Browser compatibility, plugin ecosystem
  - **Alternatives considered**: SWC, TypeScript compiler
  - **Decision date**: 2024-01-24

### Monitoring & Observability

#### Error Tracking
- **Sentry**: Error monitoring and performance tracking
  - **Why**: Comprehensive error tracking, performance monitoring
  - **Alternatives considered**: Rollbar, Bugsnag, LogRocket
  - **Decision date**: 2024-02-25

#### Logging
- **Winston 3.9.2**: Logging library
  - **Why**: Flexible, multiple transports, structured logging
  - **Alternatives considered**: Pino, Bunyan, console.log
  - **Decision date**: 2024-02-12

#### Analytics
- **Google Analytics 4**: Web analytics
  - **Why**: Industry standard, free, comprehensive insights
  - **Alternatives considered**: Mixpanel, Amplitude, Plausible
  - **Decision date**: 2024-02-28

## Development Standards

### Code Style
- **JavaScript**: ES6+ features, async/await preferred
- **React**: Functional components with hooks
- **CSS**: Tailwind utility classes, component-scoped styles
- **Git**: Conventional commits, feature branches

### File Structure
```
src/
├── components/          # Reusable UI components
│   ├── auth/           # Authentication components
│   ├── dashboard/      # Dashboard components
│   └── shared/         # Shared components
├── hooks/              # Custom React hooks
├── services/           # API services and utilities
├── contexts/           # React context providers
├── utils/              # Utility functions
├── assets/             # Static assets
└── styles/             # Global styles
```

### API Design
- **RESTful endpoints**: Standard HTTP methods
- **JSON responses**: Consistent response format
- **Error handling**: Standardized error responses
- **Authentication**: JWT bearer tokens
- **Validation**: Request/response validation

### Database Design
- **Naming**: snake_case for tables and columns
- **Relationships**: Foreign keys with proper constraints
- **Indexes**: Performance-critical queries indexed
- **Migrations**: Version-controlled schema changes

## Security Considerations

### Authentication & Authorization
- **JWT tokens**: Short-lived access tokens
- **Password hashing**: bcrypt with salt rounds
- **Session management**: Secure token storage
- **Role-based access**: Granular permissions

### Data Protection
- **Input validation**: All user inputs validated
- **SQL injection**: Parameterized queries only
- **XSS protection**: Content Security Policy
- **HTTPS**: All communications encrypted

### Infrastructure Security
- **Environment variables**: Secrets in environment
- **Docker security**: Non-root containers
- **Network security**: Firewall rules
- **Regular updates**: Dependencies kept current

## Performance Optimizations

### Frontend
- **Code splitting**: Route-based splitting
- **Lazy loading**: Component lazy loading
- **Caching**: Browser caching strategies
- **Bundle optimization**: Tree shaking, minification

### Backend
- **Database indexes**: Query optimization
- **Caching**: Redis for frequently accessed data
- **Connection pooling**: Database connection management
- **Compression**: Gzip compression for responses

### Infrastructure
- **CDN**: Static asset delivery
- **Load balancing**: Horizontal scaling
- **Database replicas**: Read replicas for scaling
- **Monitoring**: Performance metrics tracking

## Decision Records

### ADR-001: Frontend Framework Selection
- **Date**: 2024-01-15
- **Decision**: React 18.2.0
- **Rationale**: Team expertise, ecosystem maturity, performance
- **Status**: Approved

### ADR-002: Database Selection
- **Date**: 2024-01-16
- **Decision**: PostgreSQL 15.3
- **Rationale**: ACID compliance, feature richness, performance
- **Status**: Approved

### ADR-003: Authentication Strategy
- **Date**: 2024-01-30
- **Decision**: JWT-based authentication
- **Rationale**: Stateless, scalable, cross-domain support
- **Status**: Approved

### ADR-004: Deployment Strategy
- **Date**: 2024-02-20
- **Decision**: Vercel (frontend) + Railway (backend)
- **Rationale**: Simplicity, cost-effectiveness, developer experience
- **Status**: Approved

## Migration Path

### Version Upgrades
- **React**: Plan for React 19 migration
- **Node.js**: Upgrade to Node.js 20 LTS
- **PostgreSQL**: Consider PostgreSQL 16 features
- **Dependencies**: Regular security updates

### Technology Replacements
- **Monitoring**: Consider upgrading to comprehensive APM
- **Caching**: Evaluate Redis alternatives for specific use cases
- **Hosting**: Plan for potential migration to cloud providers

## Manager Integration

### Tech Stack Updates

```bash
# Update technology decisions
tmux send-keys -t PLANNER "MANAGER: Document new technology adoption: NextJS migration" C-m

# Review tech stack decisions
tmux send-keys -t PLANNER "MANAGER: Review current tech stack and identify upgrade opportunities" C-m

# Update dependencies
tmux send-keys -t WORKER "MANAGER: Update dependencies and document changes in tech_stack.mdc" C-m
```

### Architecture Reviews

```bash
# Conduct architecture review
tmux send-keys -t PLANNER "MANAGER: Conduct quarterly architecture review" C-m

# Update architectural decisions
tmux send-keys -t PLANNER "MANAGER: Update architecture documentation based on recent changes" C-m
```

### Performance Monitoring

```bash
# Review performance metrics
tmux send-keys -t WORKER "MANAGER: Review performance metrics and update optimization strategies" C-m

# Update performance standards
tmux send-keys -t PLANNER "MANAGER: Update performance standards based on latest benchmarks" C-m
```

This living technology stack documentation should be updated whenever new technologies are adopted, architectural decisions are made, or significant changes occur in the project's technical direction.