---
description: AMOS Git Checkpoints - Automatic commit and push for continuous version control and agent coordination history
globs: 
alwaysApply: false
---

# üìù AMOS Git Checkpoints

## Overview
Every task completion and agent message triggers automatic git commit and push to maintain complete history and enable rollback to any checkpoint in the multi-agent workflow.

## Automatic Git Checkpoint Strategy

### Commit Triggers
```markdown
## When to Auto-Commit & Push
1. **Task Completion**: Any agent finishes assigned work
2. **Agent Handoffs**: When one agent delegates to another
3. **Phase Transitions**: Moving between ASSESS ‚Üí PLAN ‚Üí DELEGATE ‚Üí VERIFY
4. **Status Updates**: Significant progress milestones
5. **State Updates**: Changes to agent_state.mdc or coordination files
6. **Error Recovery**: Before attempting fixes or rollbacks
```

### Commit Message Format
```bash
# Standard AMOS commit format
git commit -m "[AGENT] [ACTION]: [DESCRIPTION]

Agent: [MANAGER/PLANNER/WORKER/SUB-AGENT-X]
Phase: [ASSESS/PLAN/DELEGATE/VERIFY] 
Task: [specific task description]
Files: [files modified]
Status: [COMPLETE/IN_PROGRESS/HANDOFF]

Session: [session_id]
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint"
```

## Agent-Specific Checkpoint Patterns

### MANAGER Checkpoints
```bash
# After delegating to PLANNER
git add -A
git commit -m "MANAGER DELEGATE: Task planning assigned to PLANNER

Agent: MANAGER
Phase: PLAN
Task: [task description]
Files: agent_state.mdc (updated with delegation)
Status: HANDOFF

Delegated: Planning for [specific feature]
Context: READ instructions provided to PLANNER
Next: Await PLANNER technical plan

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint"
git push origin HEAD

# After receiving plan from PLANNER
git add -A
git commit -m "MANAGER COORDINATION: Plan received from PLANNER

Agent: MANAGER
Phase: DELEGATE
Task: [task description]
Files: agent_state.mdc (plan integration)
Status: IN_PROGRESS

Received: Technical plan from PLANNER
Action: Preparing WORKER delegation
Next: Delegate implementation tasks

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint"
git push origin HEAD
```

### PLANNER Checkpoints
```bash
# After completing technical plan
git add -A
git commit -m "PLANNER COMPLETE: Technical architecture plan ready

Agent: PLANNER
Phase: PLAN
Task: [specific planning task]
Files: agent_state.mdc (plan documented)
Status: COMPLETE

Deliverable: Technical plan in agent_state.mdc
Architecture: [brief architecture summary]
Tasks: [number] implementation tasks identified
Next: Handoff to MANAGER for delegation

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint"
git push origin HEAD

# After task breakdown
git add -A
git commit -m "PLANNER UPDATE: Task breakdown completed

Agent: PLANNER
Phase: PLAN
Task: [planning task]
Files: agent_state.mdc (task breakdown added)
Status: IN_PROGRESS

Added: Detailed task breakdown
Tasks: [list of specific tasks]
Dependencies: [dependency mapping]
Next: Finalize acceptance criteria

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint"
git push origin HEAD
```

### WORKER Checkpoints
```bash
# After completing implementation
git add -A
git commit -m "WORKER COMPLETE: [specific task] implementation finished

Agent: WORKER
Phase: DELEGATE
Task: [specific implementation task]
Files: [list of files created/modified]
Status: COMPLETE

Implementation: [brief description]
Tests: [test coverage summary]
Standards: Follows amos_config.mdc patterns
Next: Report completion to MANAGER

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint"
git push origin HEAD

# During implementation progress
git add -A
git commit -m "WORKER PROGRESS: 50% complete on [task]

Agent: WORKER
Phase: DELEGATE
Task: [implementation task]
Files: [files being modified]
Status: IN_PROGRESS

Progress: Core logic implemented
Remaining: Error handling and tests
Standards: Following amos_config.mdc guidelines
Next: Complete implementation and testing

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint"
git push origin HEAD
```

### SUB-AGENT Checkpoints
```bash
# Parallel sub-agent completion
git add -A
git commit -m "SUB-AGENT-A COMPLETE: Component logic implementation

Agent: SUB-AGENT-A
Phase: PARALLEL_DELEGATE
Task: [specific parallel task]
Files: [files created by this sub-agent]
Status: COMPLETE

Parallel Work: Component A of parallel task set
Integration: Ready for aggregation with other sub-agents
Dependencies: [any cross-sub-agent dependencies]
Next: Await parallel work completion

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint"
git push origin HEAD
```

## Communication Message Integration

### Enhanced Message Format with Auto-Commit
```bash
# MANAGER ‚Üí PLANNER with checkpoint
tmux send-keys -t PLANNER "MANAGER‚ÜíPLANNER: PLAN_REQUEST: Design OAuth system | READ: amos_config.mdc (standards), agent_state.mdc (context), src/auth/ (patterns)" C-m

# Immediate auto-commit after message
git add -A && git commit -m "MANAGER DELEGATE: Planning request sent to PLANNER

Agent: MANAGER
Phase: PLAN
Task: OAuth system design
Files: agent_state.mdc (delegation logged)
Status: HANDOFF

Message: Planning request sent with complete context
Context: Full READ instructions provided
Next: Await PLANNER technical plan

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint" && git push origin HEAD
```

### Response Messages with Checkpoints
```bash
# PLANNER ‚Üí MANAGER response with checkpoint
tmux send-keys -t MANAGER "PLANNER‚ÜíMANAGER: ‚úÖ PLAN_READY: OAuth architecture complete | CONTEXT: Plan in agent_state.mdc, follows amos_config.mdc patterns, integrates with src/auth/ structure" C-m

# Immediate auto-commit after response
git add -A && git commit -m "PLANNER COMPLETE: OAuth plan delivered to MANAGER

Agent: PLANNER
Phase: PLAN
Task: OAuth system architecture
Files: agent_state.mdc (plan documented)
Status: COMPLETE

Deliverable: Complete OAuth architecture plan
Integration: Documented in agent_state.mdc
Standards: Follows amos_config.mdc patterns
Next: MANAGER will delegate implementation

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint" && git push origin HEAD
```

## Checkpoint Management Commands

### Manual Checkpoint Creation
```bash
# Create manual checkpoint
create_checkpoint() {
    local checkpoint_type="$1"
    local description="$2"
    local agent="${3:-MANUAL}"
    
    git add -A
    git commit -m "$agent CHECKPOINT: $description

Agent: $agent
Type: $checkpoint_type
Files: $(git diff --cached --name-only | tr '\n' ' ')
Status: CHECKPOINT

Reason: Manual checkpoint creation
Context: $description
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Manual Checkpoint"
    git push origin HEAD
    echo "‚úÖ Checkpoint created: $description"
}

# Usage examples
create_checkpoint "MILESTONE" "Completed OAuth planning phase" "PLANNER"
create_checkpoint "BACKUP" "Before attempting complex refactor" "WORKER"
create_checkpoint "HANDOFF" "Preparing for agent transition" "MANAGER"
```

### Checkpoint History Review
```bash
# View AMOS checkpoint history
view_checkpoints() {
    echo "üìù Recent AMOS Checkpoints:"
    git log --oneline --grep="AMOS Auto-Checkpoint" -10
    echo ""
    echo "üéØ Agent Activity:"
    git log --oneline --grep="Agent:" -5
}

# View specific agent checkpoints
view_agent_checkpoints() {
    local agent="$1"
    echo "üìä $agent Checkpoints:"
    git log --oneline --grep="Agent: $agent" -10
}

# View checkpoints by phase
view_phase_checkpoints() {
    local phase="$1"
    echo "üîÑ $phase Phase Checkpoints:"
    git log --oneline --grep="Phase: $phase" -10
}
```

### Checkpoint Rollback
```bash
# Rollback to specific checkpoint
rollback_to_checkpoint() {
    local commit_hash="$1"
    local reason="$2"
    
    echo "‚ö†Ô∏è Rolling back to checkpoint: $commit_hash"
    echo "Reason: $reason"
    
    # Create backup of current state
    create_checkpoint "BACKUP" "Pre-rollback backup: $reason" "SYSTEM"
    
    # Perform rollback
    git reset --hard "$commit_hash"
    git push --force-with-lease origin HEAD
    
    echo "‚úÖ Rollback complete to: $commit_hash"
    echo "üí° Backup created before rollback"
}

# Emergency rollback to last working state
emergency_rollback() {
    local last_complete=$(git log --oneline --grep="Status: COMPLETE" -1 --format="%H")
    echo "üö® Emergency rollback to last complete task: $last_complete"
    rollback_to_checkpoint "$last_complete" "Emergency recovery"
}
```

## Integration with Agent Instructions

### Updated Agent Rules
```markdown
## MANDATORY: Git Checkpoint Rules for All Agents

### After Every Task Completion:
1. Complete the assigned work
2. **IMMEDIATELY** create git checkpoint with auto-commit
3. Push to remote repository
4. Send completion message to coordinator

### After Every Agent Message:
1. Send message with complete context
2. **IMMEDIATELY** create git checkpoint documenting the communication
3. Push to remote repository
4. Continue with next action

### Checkpoint Command Template:
```bash
git add -A && git commit -m "[AGENT] [ACTION]: [DESCRIPTION]

Agent: [ROLE]
Phase: [CURRENT_PHASE]
Task: [SPECIFIC_TASK]
Files: [MODIFIED_FILES]
Status: [STATUS]

[Additional context]

Session: $(date +%s)
Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)

ü§ñ AMOS Auto-Checkpoint" && git push origin HEAD
```

### No Exception Rule:
**EVERY agent action that modifies files or updates state MUST be followed by immediate git checkpoint and push.**
```

## Checkpoint Quality Standards

### Commit Message Standards
```markdown
## Required Elements in Every Checkpoint:
1. **Agent Identity**: Clear agent role identification
2. **Action Type**: COMPLETE/DELEGATE/UPDATE/HANDOFF/PROGRESS
3. **Task Context**: Specific task being worked on
4. **File Changes**: List of modified files
5. **Status**: Current state of work
6. **Next Steps**: What happens next
7. **Session ID**: Unique session identifier
8. **Timestamp**: UTC timestamp for tracking

## Commit Message Quality Checklist:
‚úÖ Clear agent identification
‚úÖ Specific action description
‚úÖ File changes documented
‚úÖ Status clearly indicated
‚úÖ Next steps specified
‚úÖ Session context provided
‚úÖ Proper AMOS checkpoint format
```

### Checkpoint Verification
```bash
# Verify checkpoint quality
verify_checkpoint() {
    local last_commit=$(git log -1 --format="%B")
    
    echo "üîç Verifying last checkpoint..."
    
    if echo "$last_commit" | grep -q "Agent:"; then
        echo "‚úÖ Agent identified"
    else
        echo "‚ùå Missing agent identification"
    fi
    
    if echo "$last_commit" | grep -q "Phase:"; then
        echo "‚úÖ Phase specified"
    else
        echo "‚ùå Missing phase information"
    fi
    
    if echo "$last_commit" | grep -q "AMOS Auto-Checkpoint"; then
        echo "‚úÖ Proper AMOS format"
    else
        echo "‚ùå Missing AMOS checkpoint marker"
    fi
}
```

---
*Continuous git checkpoints ensure complete traceability and rollback capability for multi-agent workflows*